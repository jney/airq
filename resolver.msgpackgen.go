// Code generated by msgpackgen. DO NOT EDIT.

package airq

import (
	"fmt"
	job "github.com/jney/airq/job"
	msgpack "github.com/shamaton/msgpackgen/msgpack"
	dec "github.com/shamaton/msgpackgen/msgpack/dec"
	enc "github.com/shamaton/msgpackgen/msgpack/enc"
)

// RegisterGeneratedResolver registers generated resolver.
func RegisterGeneratedResolver() {
	msgpack.SetResolver(___encodeAsMap, ___encodeAsArray, ___decodeAsMap, ___decodeAsArray)
}

// encode
func ___encode(i interface{}) ([]byte, error) {
	if msgpack.StructAsArray() {
		return ___encodeAsArray(i)
	} else {
		return ___encodeAsMap(i)
	}
}

// encodeAsArray
func ___encodeAsArray(i interface{}) ([]byte, error) {
	switch v := i.(type) {
	case job.Id:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.Id", size, offset)
		}
		return b, err
	case *job.Id:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.Id", size, offset)
		}
		return b, err
	case job.IdList:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeIdList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayIdList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.IdList", size, offset)
		}
		return b, err
	case *job.IdList:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeIdList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayIdList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.IdList", size, offset)
		}
		return b, err
	case job.Job:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.Job", size, offset)
		}
		return b, err
	case *job.Job:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.Job", size, offset)
		}
		return b, err
	case job.JobList:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeJobList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayJobList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.JobList", size, offset)
		}
		return b, err
	case *job.JobList:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeJobList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayJobList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.JobList", size, offset)
		}
		return b, err
	case job.Void:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeVoid_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayVoid_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.Void", size, offset)
		}
		return b, err
	case *job.Void:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeVoid_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayVoid_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.Void", size, offset)
		}
		return b, err
	case job.UnimplementedJobsServer:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeUnimplementedJobsServer_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayUnimplementedJobsServer_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.UnimplementedJobsServer", size, offset)
		}
		return b, err
	case *job.UnimplementedJobsServer:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeUnimplementedJobsServer_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayUnimplementedJobsServer_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.UnimplementedJobsServer", size, offset)
		}
		return b, err
	case Job:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeJob_03cf9a13f54cd39266a492e441608959677cec2f42aeecea425becdd9b00216e(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayJob_03cf9a13f54cd39266a492e441608959677cec2f42aeecea425becdd9b00216e(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "Job", size, offset)
		}
		return b, err
	case *Job:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeJob_03cf9a13f54cd39266a492e441608959677cec2f42aeecea425becdd9b00216e(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayJob_03cf9a13f54cd39266a492e441608959677cec2f42aeecea425becdd9b00216e(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "Job", size, offset)
		}
		return b, err
	}
	return nil, fmt.Errorf("use strict option : undefined type")
}

// encodeAsMap
func ___encodeAsMap(i interface{}) ([]byte, error) {
	switch v := i.(type) {
	case job.Id:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.Id", size, offset)
		}
		return b, err
	case *job.Id:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.Id", size, offset)
		}
		return b, err
	case job.IdList:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeIdList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapIdList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.IdList", size, offset)
		}
		return b, err
	case *job.IdList:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeIdList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapIdList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.IdList", size, offset)
		}
		return b, err
	case job.Job:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.Job", size, offset)
		}
		return b, err
	case *job.Job:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.Job", size, offset)
		}
		return b, err
	case job.JobList:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeJobList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapJobList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.JobList", size, offset)
		}
		return b, err
	case *job.JobList:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeJobList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapJobList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.JobList", size, offset)
		}
		return b, err
	case job.Void:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeVoid_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapVoid_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.Void", size, offset)
		}
		return b, err
	case *job.Void:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeVoid_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapVoid_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.Void", size, offset)
		}
		return b, err
	case job.UnimplementedJobsServer:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeUnimplementedJobsServer_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapUnimplementedJobsServer_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.UnimplementedJobsServer", size, offset)
		}
		return b, err
	case *job.UnimplementedJobsServer:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeUnimplementedJobsServer_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapUnimplementedJobsServer_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "github.com/jney/airq/job.UnimplementedJobsServer", size, offset)
		}
		return b, err
	case Job:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeJob_03cf9a13f54cd39266a492e441608959677cec2f42aeecea425becdd9b00216e(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapJob_03cf9a13f54cd39266a492e441608959677cec2f42aeecea425becdd9b00216e(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "Job", size, offset)
		}
		return b, err
	case *Job:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeJob_03cf9a13f54cd39266a492e441608959677cec2f42aeecea425becdd9b00216e(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapJob_03cf9a13f54cd39266a492e441608959677cec2f42aeecea425becdd9b00216e(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "Job", size, offset)
		}
		return b, err
	}
	return nil, fmt.Errorf("use strict option : undefined type")
}

// decode
func ___decode(data []byte, i interface{}) (bool, error) {
	if msgpack.StructAsArray() {
		return ___decodeAsArray(data, i)
	} else {
		return ___decodeAsMap(data, i)
	}
}

// decodeAsArray
func ___decodeAsArray(data []byte, i interface{}) (bool, error) {
	switch v := i.(type) {
	case *job.Id:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **job.Id:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *job.IdList:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayIdList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **job.IdList:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayIdList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *job.Job:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **job.Job:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *job.JobList:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayJobList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **job.JobList:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayJobList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *job.Void:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayVoid_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **job.Void:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayVoid_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *job.UnimplementedJobsServer:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayUnimplementedJobsServer_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **job.UnimplementedJobsServer:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayUnimplementedJobsServer_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *Job:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayJob_03cf9a13f54cd39266a492e441608959677cec2f42aeecea425becdd9b00216e(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **Job:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayJob_03cf9a13f54cd39266a492e441608959677cec2f42aeecea425becdd9b00216e(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	}
	return false, fmt.Errorf("use strict option : undefined type")
}

// decodeAsMap
func ___decodeAsMap(data []byte, i interface{}) (bool, error) {
	switch v := i.(type) {
	case *job.Id:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **job.Id:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *job.IdList:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapIdList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **job.IdList:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapIdList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *job.Job:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **job.Job:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *job.JobList:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapJobList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **job.JobList:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapJobList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *job.Void:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapVoid_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **job.Void:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapVoid_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *job.UnimplementedJobsServer:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapUnimplementedJobsServer_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **job.UnimplementedJobsServer:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapUnimplementedJobsServer_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *Job:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapJob_03cf9a13f54cd39266a492e441608959677cec2f42aeecea425becdd9b00216e(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **Job:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapJob_03cf9a13f54cd39266a492e441608959677cec2f42aeecea425becdd9b00216e(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	}
	return false, fmt.Errorf("use strict option : undefined type")
}

// calculate size from github.com/jney/airq/job.Id
func ___calcArraySizeId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.Id, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(1)
	size += encoder.CalcString(v.Id)
	return size, nil
}

// calculate size from github.com/jney/airq/job.Id
func ___calcMapSizeId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.Id, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(1)
	size += encoder.CalcStringFix(2)
	size += encoder.CalcString(v.Id)
	return size, nil
}

// encode from github.com/jney/airq/job.Id
func ___encodeArrayId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.Id, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(1, offset)
	offset = encoder.WriteString(v.Id, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/jney/airq/job.Id
func ___encodeMapId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.Id, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(1, offset)
	offset = encoder.WriteStringFix("Id", 2, offset)
	offset = encoder.WriteString(v.Id, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/jney/airq/job.Id
func ___decodeArrayId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v *job.Id, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(1, offset)
	if err != nil {
		return 0, err
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.Id = vv
	}
	return offset, err
}

// decode to github.com/jney/airq/job.Id
func ___decodeMapId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v *job.Id, decoder *dec.Decoder, offset int) (int, error) {
	keys := [][]byte{
		{uint8(0x49), uint8(0x64)}, // Id
	}
	offset, err := decoder.CheckStructHeader(1, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 1 {
		var dataKey []byte
		dataKey, offset, err = decoder.AsStringBytes(offset)
		if err != nil {
			return 0, err
		}
		fieldIndex := -1
		for i, key := range keys {
			if len(dataKey) != len(key) {
				continue
			}
			fieldIndex = i
			for dataKeyIndex := range dataKey {
				if dataKey[dataKeyIndex] != key[dataKeyIndex] {
					fieldIndex = -1
					break
				}
			}
			if fieldIndex >= 0 {
				break
			}
		}
		switch fieldIndex {
		case 0:
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.Id = vv
			}
			count++
		default:
			return 0, fmt.Errorf("unknown key[%s] found", string(dataKey))
		}
	}
	return offset, err
}

// calculate size from github.com/jney/airq/job.IdList
func ___calcArraySizeIdList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.IdList, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(1)
	if v.Ids != nil {
		s, err := encoder.CalcSliceLength(len(v.Ids), false)
		if err != nil {
			return 0, err
		}
		size += s
		for _, vv := range v.Ids {
			if vv != nil {
				vvp := *vv
				size_vvp, err := ___calcArraySizeId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(vvp, encoder)
				if err != nil {
					return 0, err
				}
				size += size_vvp
			} else {
				size += encoder.CalcNil()
			}
		}
	} else {
		size += encoder.CalcNil()
	}
	return size, nil
}

// calculate size from github.com/jney/airq/job.IdList
func ___calcMapSizeIdList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.IdList, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(1)
	size += encoder.CalcStringFix(3)
	if v.Ids != nil {
		s, err := encoder.CalcSliceLength(len(v.Ids), false)
		if err != nil {
			return 0, err
		}
		size += s
		for _, vv := range v.Ids {
			if vv != nil {
				vvp := *vv
				size_vvp, err := ___calcMapSizeId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(vvp, encoder)
				if err != nil {
					return 0, err
				}
				size += size_vvp
			} else {
				size += encoder.CalcNil()
			}
		}
	} else {
		size += encoder.CalcNil()
	}
	return size, nil
}

// encode from github.com/jney/airq/job.IdList
func ___encodeArrayIdList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.IdList, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(1, offset)
	if v.Ids != nil {
		offset = encoder.WriteSliceLength(len(v.Ids), offset, false)
		for _, vv := range v.Ids {
			if vv != nil {
				vvp := *vv
				_, offset, err = ___encodeArrayId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(vvp, encoder, offset)
				if err != nil {
					return nil, 0, err
				}
			} else {
				offset = encoder.WriteNil(offset)
			}
		}
	} else {
		offset = encoder.WriteNil(offset)
	}
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/jney/airq/job.IdList
func ___encodeMapIdList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.IdList, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(1, offset)
	offset = encoder.WriteStringFix("Ids", 3, offset)
	if v.Ids != nil {
		offset = encoder.WriteSliceLength(len(v.Ids), offset, false)
		for _, vv := range v.Ids {
			if vv != nil {
				vvp := *vv
				_, offset, err = ___encodeMapId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(vvp, encoder, offset)
				if err != nil {
					return nil, 0, err
				}
			} else {
				offset = encoder.WriteNil(offset)
			}
		}
	} else {
		offset = encoder.WriteNil(offset)
	}
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/jney/airq/job.IdList
func ___decodeArrayIdList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v *job.IdList, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(1, offset)
	if err != nil {
		return 0, err
	}
	if !decoder.IsCodeNil(offset) {
		var vv []*job.Id
		var vvl int
		vvl, offset, err = decoder.SliceLength(offset)
		if err != nil {
			return 0, err
		}
		vv = make([]*job.Id, vvl)
		for vvi := range vv {
			var vvv *job.Id
			if !decoder.IsCodeNil(offset) {
				var vvvp job.Id
				offset, err = ___decodeArrayId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(&vvvp, decoder, offset)
				if err != nil {
					return 0, err
				}
				vvv = &vvvp
			} else {
				offset++
			}
			vv[vvi] = vvv
		}
		v.Ids = vv
	} else {
		offset++
	}
	return offset, err
}

// decode to github.com/jney/airq/job.IdList
func ___decodeMapIdList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v *job.IdList, decoder *dec.Decoder, offset int) (int, error) {
	keys := [][]byte{
		{uint8(0x49), uint8(0x64), uint8(0x73)}, // Ids
	}
	offset, err := decoder.CheckStructHeader(1, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 1 {
		var dataKey []byte
		dataKey, offset, err = decoder.AsStringBytes(offset)
		if err != nil {
			return 0, err
		}
		fieldIndex := -1
		for i, key := range keys {
			if len(dataKey) != len(key) {
				continue
			}
			fieldIndex = i
			for dataKeyIndex := range dataKey {
				if dataKey[dataKeyIndex] != key[dataKeyIndex] {
					fieldIndex = -1
					break
				}
			}
			if fieldIndex >= 0 {
				break
			}
		}
		switch fieldIndex {
		case 0:
			if !decoder.IsCodeNil(offset) {
				var vv []*job.Id
				var vvl int
				vvl, offset, err = decoder.SliceLength(offset)
				if err != nil {
					return 0, err
				}
				vv = make([]*job.Id, vvl)
				for vvi := range vv {
					var vvv *job.Id
					if !decoder.IsCodeNil(offset) {
						var vvvp job.Id
						offset, err = ___decodeMapId_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(&vvvp, decoder, offset)
						if err != nil {
							return 0, err
						}
						vvv = &vvvp
					} else {
						offset++
					}
					vv[vvi] = vvv
				}
				v.Ids = vv
			} else {
				offset++
			}
			count++
		default:
			return 0, fmt.Errorf("unknown key[%s] found", string(dataKey))
		}
	}
	return offset, err
}

// calculate size from github.com/jney/airq/job.Job
func ___calcArraySizeJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.Job, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(4)
	size += encoder.CalcString(v.Id)
	size += encoder.CalcString(v.Content)
	size += encoder.CalcInt32(v.Strategy)
	size += encoder.CalcInt64(v.When)
	return size, nil
}

// calculate size from github.com/jney/airq/job.Job
func ___calcMapSizeJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.Job, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(4)
	size += encoder.CalcStringFix(2)
	size += encoder.CalcString(v.Id)
	size += encoder.CalcStringFix(7)
	size += encoder.CalcString(v.Content)
	size += encoder.CalcStringFix(8)
	size += encoder.CalcInt32(v.Strategy)
	size += encoder.CalcStringFix(4)
	size += encoder.CalcInt64(v.When)
	return size, nil
}

// encode from github.com/jney/airq/job.Job
func ___encodeArrayJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.Job, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(4, offset)
	offset = encoder.WriteString(v.Id, offset)
	offset = encoder.WriteString(v.Content, offset)
	offset = encoder.WriteInt32(v.Strategy, offset)
	offset = encoder.WriteInt64(v.When, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/jney/airq/job.Job
func ___encodeMapJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.Job, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(4, offset)
	offset = encoder.WriteStringFix("Id", 2, offset)
	offset = encoder.WriteString(v.Id, offset)
	offset = encoder.WriteStringFix("Content", 7, offset)
	offset = encoder.WriteString(v.Content, offset)
	offset = encoder.WriteStringFix("Strategy", 8, offset)
	offset = encoder.WriteInt32(v.Strategy, offset)
	offset = encoder.WriteStringFix("When", 4, offset)
	offset = encoder.WriteInt64(v.When, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/jney/airq/job.Job
func ___decodeArrayJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v *job.Job, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(4, offset)
	if err != nil {
		return 0, err
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.Id = vv
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.Content = vv
	}
	{
		var vv int32
		vv, offset, err = decoder.AsInt32(offset)
		if err != nil {
			return 0, err
		}
		v.Strategy = vv
	}
	{
		var vv int64
		vv, offset, err = decoder.AsInt64(offset)
		if err != nil {
			return 0, err
		}
		v.When = vv
	}
	return offset, err
}

// decode to github.com/jney/airq/job.Job
func ___decodeMapJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v *job.Job, decoder *dec.Decoder, offset int) (int, error) {
	keys := [][]byte{
		{uint8(0x49), uint8(0x64)}, // Id
		{uint8(0x43), uint8(0x6f), uint8(0x6e), uint8(0x74), uint8(0x65), uint8(0x6e), uint8(0x74)},              // Content
		{uint8(0x53), uint8(0x74), uint8(0x72), uint8(0x61), uint8(0x74), uint8(0x65), uint8(0x67), uint8(0x79)}, // Strategy
		{uint8(0x57), uint8(0x68), uint8(0x65), uint8(0x6e)},                                                     // When
	}
	offset, err := decoder.CheckStructHeader(4, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 4 {
		var dataKey []byte
		dataKey, offset, err = decoder.AsStringBytes(offset)
		if err != nil {
			return 0, err
		}
		fieldIndex := -1
		for i, key := range keys {
			if len(dataKey) != len(key) {
				continue
			}
			fieldIndex = i
			for dataKeyIndex := range dataKey {
				if dataKey[dataKeyIndex] != key[dataKeyIndex] {
					fieldIndex = -1
					break
				}
			}
			if fieldIndex >= 0 {
				break
			}
		}
		switch fieldIndex {
		case 0:
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.Id = vv
			}
			count++
		case 1:
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.Content = vv
			}
			count++
		case 2:
			{
				var vv int32
				vv, offset, err = decoder.AsInt32(offset)
				if err != nil {
					return 0, err
				}
				v.Strategy = vv
			}
			count++
		case 3:
			{
				var vv int64
				vv, offset, err = decoder.AsInt64(offset)
				if err != nil {
					return 0, err
				}
				v.When = vv
			}
			count++
		default:
			return 0, fmt.Errorf("unknown key[%s] found", string(dataKey))
		}
	}
	return offset, err
}

// calculate size from github.com/jney/airq/job.JobList
func ___calcArraySizeJobList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.JobList, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(1)
	if v.Jobs != nil {
		s, err := encoder.CalcSliceLength(len(v.Jobs), false)
		if err != nil {
			return 0, err
		}
		size += s
		for _, vv := range v.Jobs {
			if vv != nil {
				vvp := *vv
				size_vvp, err := ___calcArraySizeJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(vvp, encoder)
				if err != nil {
					return 0, err
				}
				size += size_vvp
			} else {
				size += encoder.CalcNil()
			}
		}
	} else {
		size += encoder.CalcNil()
	}
	return size, nil
}

// calculate size from github.com/jney/airq/job.JobList
func ___calcMapSizeJobList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.JobList, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(1)
	size += encoder.CalcStringFix(4)
	if v.Jobs != nil {
		s, err := encoder.CalcSliceLength(len(v.Jobs), false)
		if err != nil {
			return 0, err
		}
		size += s
		for _, vv := range v.Jobs {
			if vv != nil {
				vvp := *vv
				size_vvp, err := ___calcMapSizeJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(vvp, encoder)
				if err != nil {
					return 0, err
				}
				size += size_vvp
			} else {
				size += encoder.CalcNil()
			}
		}
	} else {
		size += encoder.CalcNil()
	}
	return size, nil
}

// encode from github.com/jney/airq/job.JobList
func ___encodeArrayJobList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.JobList, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(1, offset)
	if v.Jobs != nil {
		offset = encoder.WriteSliceLength(len(v.Jobs), offset, false)
		for _, vv := range v.Jobs {
			if vv != nil {
				vvp := *vv
				_, offset, err = ___encodeArrayJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(vvp, encoder, offset)
				if err != nil {
					return nil, 0, err
				}
			} else {
				offset = encoder.WriteNil(offset)
			}
		}
	} else {
		offset = encoder.WriteNil(offset)
	}
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/jney/airq/job.JobList
func ___encodeMapJobList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.JobList, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(1, offset)
	offset = encoder.WriteStringFix("Jobs", 4, offset)
	if v.Jobs != nil {
		offset = encoder.WriteSliceLength(len(v.Jobs), offset, false)
		for _, vv := range v.Jobs {
			if vv != nil {
				vvp := *vv
				_, offset, err = ___encodeMapJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(vvp, encoder, offset)
				if err != nil {
					return nil, 0, err
				}
			} else {
				offset = encoder.WriteNil(offset)
			}
		}
	} else {
		offset = encoder.WriteNil(offset)
	}
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/jney/airq/job.JobList
func ___decodeArrayJobList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v *job.JobList, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(1, offset)
	if err != nil {
		return 0, err
	}
	if !decoder.IsCodeNil(offset) {
		var vv []*job.Job
		var vvl int
		vvl, offset, err = decoder.SliceLength(offset)
		if err != nil {
			return 0, err
		}
		vv = make([]*job.Job, vvl)
		for vvi := range vv {
			var vvv *job.Job
			if !decoder.IsCodeNil(offset) {
				var vvvp job.Job
				offset, err = ___decodeArrayJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(&vvvp, decoder, offset)
				if err != nil {
					return 0, err
				}
				vvv = &vvvp
			} else {
				offset++
			}
			vv[vvi] = vvv
		}
		v.Jobs = vv
	} else {
		offset++
	}
	return offset, err
}

// decode to github.com/jney/airq/job.JobList
func ___decodeMapJobList_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v *job.JobList, decoder *dec.Decoder, offset int) (int, error) {
	keys := [][]byte{
		{uint8(0x4a), uint8(0x6f), uint8(0x62), uint8(0x73)}, // Jobs
	}
	offset, err := decoder.CheckStructHeader(1, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 1 {
		var dataKey []byte
		dataKey, offset, err = decoder.AsStringBytes(offset)
		if err != nil {
			return 0, err
		}
		fieldIndex := -1
		for i, key := range keys {
			if len(dataKey) != len(key) {
				continue
			}
			fieldIndex = i
			for dataKeyIndex := range dataKey {
				if dataKey[dataKeyIndex] != key[dataKeyIndex] {
					fieldIndex = -1
					break
				}
			}
			if fieldIndex >= 0 {
				break
			}
		}
		switch fieldIndex {
		case 0:
			if !decoder.IsCodeNil(offset) {
				var vv []*job.Job
				var vvl int
				vvl, offset, err = decoder.SliceLength(offset)
				if err != nil {
					return 0, err
				}
				vv = make([]*job.Job, vvl)
				for vvi := range vv {
					var vvv *job.Job
					if !decoder.IsCodeNil(offset) {
						var vvvp job.Job
						offset, err = ___decodeMapJob_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(&vvvp, decoder, offset)
						if err != nil {
							return 0, err
						}
						vvv = &vvvp
					} else {
						offset++
					}
					vv[vvi] = vvv
				}
				v.Jobs = vv
			} else {
				offset++
			}
			count++
		default:
			return 0, fmt.Errorf("unknown key[%s] found", string(dataKey))
		}
	}
	return offset, err
}

// calculate size from github.com/jney/airq/job.Void
func ___calcArraySizeVoid_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.Void, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(0)
	return size, nil
}

// calculate size from github.com/jney/airq/job.Void
func ___calcMapSizeVoid_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.Void, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(0)
	return size, nil
}

// encode from github.com/jney/airq/job.Void
func ___encodeArrayVoid_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.Void, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(0, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/jney/airq/job.Void
func ___encodeMapVoid_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.Void, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(0, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/jney/airq/job.Void
func ___decodeArrayVoid_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v *job.Void, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(0, offset)
	if err != nil {
		return 0, err
	}
	return offset, err
}

// decode to github.com/jney/airq/job.Void
func ___decodeMapVoid_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v *job.Void, decoder *dec.Decoder, offset int) (int, error) {
	keys := [][]byte{}
	offset, err := decoder.CheckStructHeader(0, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 0 {
		var dataKey []byte
		dataKey, offset, err = decoder.AsStringBytes(offset)
		if err != nil {
			return 0, err
		}
		fieldIndex := -1
		for i, key := range keys {
			if len(dataKey) != len(key) {
				continue
			}
			fieldIndex = i
			for dataKeyIndex := range dataKey {
				if dataKey[dataKeyIndex] != key[dataKeyIndex] {
					fieldIndex = -1
					break
				}
			}
			if fieldIndex >= 0 {
				break
			}
		}
		switch fieldIndex {
		default:
			return 0, fmt.Errorf("unknown key[%s] found", string(dataKey))
		}
	}
	return offset, err
}

// calculate size from github.com/jney/airq/job.UnimplementedJobsServer
func ___calcArraySizeUnimplementedJobsServer_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.UnimplementedJobsServer, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(0)
	return size, nil
}

// calculate size from github.com/jney/airq/job.UnimplementedJobsServer
func ___calcMapSizeUnimplementedJobsServer_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.UnimplementedJobsServer, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(0)
	return size, nil
}

// encode from github.com/jney/airq/job.UnimplementedJobsServer
func ___encodeArrayUnimplementedJobsServer_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.UnimplementedJobsServer, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(0, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/jney/airq/job.UnimplementedJobsServer
func ___encodeMapUnimplementedJobsServer_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v job.UnimplementedJobsServer, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(0, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/jney/airq/job.UnimplementedJobsServer
func ___decodeArrayUnimplementedJobsServer_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v *job.UnimplementedJobsServer, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(0, offset)
	if err != nil {
		return 0, err
	}
	return offset, err
}

// decode to github.com/jney/airq/job.UnimplementedJobsServer
func ___decodeMapUnimplementedJobsServer_a1b89628ee7b5f1847c6d5953433d090cba6723a941f84c195bf8dd316af7d6a(v *job.UnimplementedJobsServer, decoder *dec.Decoder, offset int) (int, error) {
	keys := [][]byte{}
	offset, err := decoder.CheckStructHeader(0, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 0 {
		var dataKey []byte
		dataKey, offset, err = decoder.AsStringBytes(offset)
		if err != nil {
			return 0, err
		}
		fieldIndex := -1
		for i, key := range keys {
			if len(dataKey) != len(key) {
				continue
			}
			fieldIndex = i
			for dataKeyIndex := range dataKey {
				if dataKey[dataKeyIndex] != key[dataKeyIndex] {
					fieldIndex = -1
					break
				}
			}
			if fieldIndex >= 0 {
				break
			}
		}
		switch fieldIndex {
		default:
			return 0, fmt.Errorf("unknown key[%s] found", string(dataKey))
		}
	}
	return offset, err
}

// calculate size from github.com/jney/airq.Job
func ___calcArraySizeJob_03cf9a13f54cd39266a492e441608959677cec2f42aeecea425becdd9b00216e(v Job, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(3)
	size += encoder.CalcString(v.CompressedContent)
	size += encoder.CalcString(v.ID)
	size += encoder.CalcInt64(v.WhenUnixNano)
	return size, nil
}

// calculate size from github.com/jney/airq.Job
func ___calcMapSizeJob_03cf9a13f54cd39266a492e441608959677cec2f42aeecea425becdd9b00216e(v Job, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(3)
	size += encoder.CalcStringFix(7)
	size += encoder.CalcString(v.CompressedContent)
	size += encoder.CalcStringFix(2)
	size += encoder.CalcString(v.ID)
	size += encoder.CalcStringFix(4)
	size += encoder.CalcInt64(v.WhenUnixNano)
	return size, nil
}

// encode from github.com/jney/airq.Job
func ___encodeArrayJob_03cf9a13f54cd39266a492e441608959677cec2f42aeecea425becdd9b00216e(v Job, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(3, offset)
	offset = encoder.WriteString(v.CompressedContent, offset)
	offset = encoder.WriteString(v.ID, offset)
	offset = encoder.WriteInt64(v.WhenUnixNano, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/jney/airq.Job
func ___encodeMapJob_03cf9a13f54cd39266a492e441608959677cec2f42aeecea425becdd9b00216e(v Job, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(3, offset)
	offset = encoder.WriteStringFix("content", 7, offset)
	offset = encoder.WriteString(v.CompressedContent, offset)
	offset = encoder.WriteStringFix("id", 2, offset)
	offset = encoder.WriteString(v.ID, offset)
	offset = encoder.WriteStringFix("when", 4, offset)
	offset = encoder.WriteInt64(v.WhenUnixNano, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/jney/airq.Job
func ___decodeArrayJob_03cf9a13f54cd39266a492e441608959677cec2f42aeecea425becdd9b00216e(v *Job, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(3, offset)
	if err != nil {
		return 0, err
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.CompressedContent = vv
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.ID = vv
	}
	{
		var vv int64
		vv, offset, err = decoder.AsInt64(offset)
		if err != nil {
			return 0, err
		}
		v.WhenUnixNano = vv
	}
	return offset, err
}

// decode to github.com/jney/airq.Job
func ___decodeMapJob_03cf9a13f54cd39266a492e441608959677cec2f42aeecea425becdd9b00216e(v *Job, decoder *dec.Decoder, offset int) (int, error) {
	keys := [][]byte{
		{uint8(0x63), uint8(0x6f), uint8(0x6e), uint8(0x74), uint8(0x65), uint8(0x6e), uint8(0x74)}, // content
		{uint8(0x69), uint8(0x64)},                           // id
		{uint8(0x77), uint8(0x68), uint8(0x65), uint8(0x6e)}, // when
	}
	offset, err := decoder.CheckStructHeader(3, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 3 {
		var dataKey []byte
		dataKey, offset, err = decoder.AsStringBytes(offset)
		if err != nil {
			return 0, err
		}
		fieldIndex := -1
		for i, key := range keys {
			if len(dataKey) != len(key) {
				continue
			}
			fieldIndex = i
			for dataKeyIndex := range dataKey {
				if dataKey[dataKeyIndex] != key[dataKeyIndex] {
					fieldIndex = -1
					break
				}
			}
			if fieldIndex >= 0 {
				break
			}
		}
		switch fieldIndex {
		case 0:
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.CompressedContent = vv
			}
			count++
		case 1:
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.ID = vv
			}
			count++
		case 2:
			{
				var vv int64
				vv, offset, err = decoder.AsInt64(offset)
				if err != nil {
					return 0, err
				}
				v.WhenUnixNano = vv
			}
			count++
		default:
			return 0, fmt.Errorf("unknown key[%s] found", string(dataKey))
		}
	}
	return offset, err
}
